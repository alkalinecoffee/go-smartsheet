/*
 * Copyright 2020 wfleming@grumpysysadm.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package smartsheet

import (
	"fmt"
	"time"

	"github.com/mitchellh/mapstructure"
)

type Webhook struct {
	Id              int64        `json:"id,omitempty"`              // Webhook Id
	ApiClientId     string       `json:"apiClientId,omitempty"`     // API client Id corresponding to third-party app that created the webhook. Read-only. Only present if webhook was created by third-party app.
	ScopeObjectId   int64        `json:"scopeObjectId,omitempty"`   // Id of the object that is subscribed to. Specified when a webhook is created and cannot be changed.
	ApiClientName   string       `json:"apiClientName,omitempty"`   // API client name corresponding to third-party app that created the webhook. Read-only. Only present if webhook was created by third-party app.
	CallbackUrl     string       `json:"callbackUrl,omitempty"`     // HTTPS URL where callbacks are sent.
	CreatedAt       *time.Time   `json:"createdAt,omitempty"`       // Time of creation. Read-only.
	DisabledDetails string       `json:"disabledDetails,omitempty"` // Details about the reason the webhook was disabled. Read-only. Only present when enabled=false.
	Enabled         bool         `json:"enabled,omitempty"`         // Indicates whether the webhook is on (true) or off (false)
	Events          []string     `json:"events,omitempty"`          // Array of the events that are subscribed to. Currently, must be an array of size 1 that contains the string value "*.*", which means "all objects" and "all events".
	ModifiedAt      *time.Time   `json:"modifiedAt,omitempty"`      // Time of last modification. Read-only.
	Name            string       `json:"name,omitempty"`            // Webhook name
	Scope           string       `json:"scope,omitempty"`           // Scope of the subscription. Currently, the only supported value is sheet. Specified when a webhook is created and cannot be changed.
	SharedSecret    string       `json:"sharedSecret,omitempty"`    // Shared secret for this webhook, randomly generated by Smartsheet. Read-only. See Authenticating Callbacks for details about how this value can be used.
	Stats           WebhookStats `json:"stats,omitempty"`           // Useful statistics for this webhook. Only returned once this webhook has performed a callback attempt. Read-only.
	Status          string       `json:"status,omitempty"`          // Webhook status. Read-only. See Webhook Status for list of possible values.
	Subscope        []int64      `json:"subscope,omitempty"`        // Array of columnIds if you want to limit the subscription to a subscope. Specified when a webhook is created and cannot be changed.
	Version         int64        `json:"version,omitempty"`         // Webhook version. Currently, the only supported value is 1. This attribute is intended to ensure backward compatibility as new webhook functionality is released. For example, a webhook with a version of 1 is guaranteed to always be sent callback objects that are compatible with the version 1 release of webhooks.
}

type WebhookStats struct {
	LastCallbackAttempt           *time.Time `json:"lastCallbackAttempt,omitempty"`           // When this webhook last made a callback attempt.
	LastCallbackAttemptRetryCount int        `json:"lastCallbackAttemptRetryCount,omitempty"` // The number of retries the webhook had performed as of the last callback attempt.
	LastSuccessfulCallback        *time.Time `json:"lastSuccessfulCallback,omitempty"`        // When this webhook last made a successful callback.
}

// Return IndexResultObject object
func (c Client) GetWebhooks() (*[]Webhook, error) {
	var res IndexResultObject
	resp, err := c.get(fmt.Sprintf("%s/webhooks", apiEndpoint))
	if err != nil {
		return nil, err
	}

	if dErr := c.decodeJSON(resp, &res); dErr != nil {
		return nil, fmt.Errorf("could not decode JSON response: %v", dErr)
	}

	var result []Webhook
	mapstructure.Decode(res.Data, &result)

	return &result, nil
}
